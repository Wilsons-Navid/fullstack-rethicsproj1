
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import '../vuln.css';

const API_BASE_URL = `${process.env.REACT_APP_API_BASE_URL}/api/scans`;


const VulnerabilityScanner = () => {
  const [url, setUrl] = useState('');
  const [scanId, setScanId] = useState(null);
  const [scanStatus, setScanStatus] = useState(null);
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Add auth headers to axios requests
  useEffect(() => {
    axios.interceptors.request.use((config) => {
      const token = localStorage.getItem('token');
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
      return config;
    });
  }, []);

  const pollScanResults = async (id) => {
    try {
      const response = await axios.get(`${API_BASE_URL}/${id}`); // Corrected URL
      const { status, vulnerabilities } = response.data;
      
      if (status === 'completed') {
        setScanStatus('completed');
        setVulnerabilities(vulnerabilities);
        setLoading(false);
      } else if (status === 'failed') {
        setError('Scan failed. Please try again.');
        setLoading(false);
      } else {
        setTimeout(() => pollScanResults(id), 30000); // Continue polling
      }
    } catch (err) {
      setError('Error fetching scan results');
      setLoading(false);
    }
  };

  const handleScan = async () => {
    if (!url) {
      alert('Please enter a valid URL');
      return;
    }

    setLoading(true);
    setError(null);
    setVulnerabilities([]);

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        alert('Please log in to start a scan');
        return;
      }

      const response = await axios.post(
        `${API_BASE_URL}/scans`, // Corrected URL
        { targetUrl: url },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      setScanId(response.data.scanId);
      setScanStatus('queued');
      pollScanResults(response.data.scanId);
    } catch (error) {
      console.log(scanId);
      console.error('Error starting scan:', error);
      setError('Failed to start scan. Please try again.');
      setLoading(false);
    }
  };

  return (
    <div className="scanner-container">
      <h2>Vulnerability Scanner</h2>
      <div className="input-group">
        <label>Enter Website URL</label>
        <input
          type="text"
          className="scanner-input"
          placeholder="https://example.com"
          value={url}
          onChange={(e) => setUrl(e.target.value)}
          disabled={loading}
        />
      </div>
      
      <button 
        className="btn btn-primary"
        onClick={handleScan}
        disabled={loading}
      >
        {loading ? 'Scanning' : 'Scan Website'}
        {loading && <span className="loading-dots"></span>}
      </button>

      {error && (
        <div className="alert alert-error">
          {error}
        </div>
      )}

      {scanStatus && (
        <div className="scan-results">
          <h3 className="status-heading">Scan Status: {scanStatus}</h3>
          
          {scanStatus === 'completed' && (
            <div className="results-container">
              <h4>Found Vulnerabilities: {vulnerabilities.length}</h4>
              {vulnerabilities.length > 0 ? (
                <div className="vulnerability-list">
                  {vulnerabilities.map((vuln, index) => (
                    <div 
                      key={index}
                      className="vulnerability-item"
                    >
                      <div className="vulnerability-header">
                        <h5>{vuln.name}</h5>
                        <span className={`severity-badge severity-${vuln.severity}`}>
                          {vuln.severity}
                        </span>
                      </div>
                      <p>{vuln.description}</p>
                      <div className="vulnerability-meta">
                        <span>Template ID: {vuln.templateId}</span>
                        <span>Matched at: {vuln.matchedUrl}</span>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="alert alert-success">
                  No vulnerabilities found!
                </div>
              )}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default VulnerabilityScanner;